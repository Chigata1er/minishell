SOLVED ALREADY:
Problem 25: echo $? shows 130 instead of 0 after CTRL-C - Lien (add a global variable of 'g_sigint_received' into the function of ft_execute_action(int sig)
Problem 26: echo $? shows 1 instead of 0 after do this command: < heredoc.c < minishell.h cat > /bin/ls'- Lien
Problem 27: inintialize for export aaa=aaa, echo $afafPWD, and for the whole programme (failed to initialize environment list) with this command: valgrind --leak-check=full env -i ./minishell - Lien
Problem 28: ls | cat << END << N (double free) - Lien
Problem 29: export aaaa - Ibyeo
Problem 30: a small leak memory after UNSET PATH->ls - Lien
Probelm 17: "$HOMEsfdslbbdldbln" - Ibyeo
Problem 18:
non seulement les signaux signal CTRL C: double le prompt minishell dqns l attente d un stdin - Ibyeo (Lien solved)
Problem 19:export: VAR+= ecrase au lieu de les assembler (SHLVL=1, SHLVL=1K)

Problem 20:Redirection : > qui parfois supprime le contenu sans rien ajouter derriere: < ls.txt | grep lexer, cat < ls.txt | grep > ls.txt (cat ls.txt), cat < ls.txt > ls.txt-Ibyeo
(No need to solve this problem because it behave the same with bash already))
Problem 22: Global variable : utilise pour la valeur de retour - Lien
Problem 23:>>: ls | cat << EOF << N: casse a cause du pipe - Lien
Problem 24:De norme-Lien

Problem1: /bin/ls -Lien
Problem2: echo "cat lol.c | cat > lol.c"-Lien
Problem3: exit 42, exit aa, exit 42 2-Lien
Problem 4: echo hello	world-Lien
Problem 5: $?-Lien
Problem 6 & 7: cat < in << END < out; cat < in << aaaa < out-Lien
Problem 8: export: add in 'declare  -x' and list of env with alphabet order -Ibyeo
Problem 9: cat | cat | ls - Ibyeo (Lien already solved)
Problem 10: export TEST+=a, export TEST-=a, export "", export '', export %, export$?, export ?=2, export 9HOLA=(check  '800 tests pour Minishell' to cover all the cases of export), unset =, unset ===, unset ++++-Lien
Problem11: 'unset PATH' then 'ls'-> will not display the result of ls. - Ibyeo
Problem12: sleep 3 | sleep 3 | sleep 3 ( 3 cases like in the '800 tests pour Minishell'); sleep 3 | sleep 3; time sleep 3 | sleep 3 _Lien
Problem 13: cat /dev/urandom | head -n 1-Lien
Problem 14: cat << EOF (see the photos to understand the problem when type Ctrl-C after doing  the heredoc) - Lien (Lien already solved)
Problem 15: :, !, <, >, <<, <<, <>, <<<<<, <<<<<<<<<<<<<, pipe: | |, | | |, | | | |, >>|><,  OR:|, ||, |||, AND: &&, &&&&, &&&&&&&&, :  give message like 'bash: syntax error' near unexpected token `newline'', bash: syntax error near unexpected token `<<', bash: syntax error near unexpected token `<<<',  'bash: syntax error near unexpected token `|'',  bash: syntax error near unexpected token `||', bash: syntax error near unexpected token `||', bash: syntax error near unexpected token `&&'-Lien (Lien already solved)
Problem 16: (Lien already solved)
echo $"HOME"
echo $"HO""ME"
echo $'HOME'
echo $'HO''ME'
Output: HOME
Problem 17: "$HOMEsfdslbbdldbln"-Lien
Problem 18: export | grep "HOME" (Lien already solved)
Problem 19: Access denied-$?

Problem 30: a small leak memory after UNSET PATH -> ls - Lien
//builtins5.c
int	handle_unset(char **argv, t_env *envv, char ***path)
{
	if (argv[1])
	{
		ft_drop(envv, argv[1]);
		if (ft_strcmp(argv[1], "PATH") == 0)
		{
			free_path(*path);
			*path = NULL;
		}
	}
	envv->exit_status = 0;
	return (1);
}
//dollarquestion2.c
char	*find_command_path(char **path, char **argv)
{
	int		k;
	char	*str;
	char	*str1;

	if (!path)
		return (NULL);
	k = 0;
	while (path[k])
	{
		str1 = ft_strjoin(path[k], "/");
		if (!str1)
			return (NULL);
		str = ft_strjoin(str1, argv[0]);
		free(str1);
		if (!str)
			return (NULL);
		if (!access(str, X_OK))
			return (str);
		free(str);
		k++;
	}
	return (NULL);
}
Problem 21:Un petit leak de memoire ft_split_args-Ibyeo

main.c
int	main(int argc, char **argv, char **envp)
{
	t_env	*envv;
	char	**path;

	(void)argc;
	if (!init_shell(envp, &envv, &path))
		return (1);
	shell_loop(argv, envv, path);
	free_split(path);
	free_env_list(envv);
	return (0);
}
pipes4.c
Replace 'prepare_argv' function by these functions and then move two final functions in pipes4.c to pipes5.c to adapt to Norminette

char	**process_quotes_and_redirects(char **argv, t_io *io, t_env *envv)
{
	char	**new_argv;

	new_argv = ft_drop_quotes(argv, envv);
	if (!new_argv)
		return (free_split(argv), NULL);
	if (new_argv != argv)
		free_split(argv);
	argv = new_argv;
	new_argv = handle_redirection(argv, &io->in_fd, &io->out_fd, envv);
	if (!new_argv)
		return (free_split(argv), NULL);
	if (new_argv != argv)
		free_split(argv);
	return (new_argv);
}

char	**process_heredocs(char **argv, t_io *io, t_env *envv)
{
	char	**new_argv;
	int		i;

	i = 0;
	while (argv && argv[i])
	{
		if (ft_strcmp(argv[i], "<<") == 0 && argv[i + 1])
		{
			io->heredoc_fd = handle_heredocs_multiple(argv, envv);
			if (io->heredoc_fd == -1)
				return (free_split(argv), NULL);
			new_argv = remove_heredoc_tokens(argv);
			if (!new_argv)
				return (free_split(argv), NULL);
			if (new_argv != argv)
				free_split(argv);
			return (new_argv);
		}
		i++;
	}
	return (argv);
}

char	**prepare_argv(char *cmd, t_io *io, t_env *envv)
{
	char	**argv;

	argv = ft_split_args(cmd);
	if (!argv)
		return (NULL);
	argv = process_quotes_and_redirects(argv, io, envv);
	if (!argv)
		return (NULL);
	argv = process_heredocs(argv, io, envv);
	return (argv);
}

heredoc.c
void	free_env_list(t_env *head)
{
	t_env *tmp;

	while (head)
	{
		tmp = head;
		head = head->next;
		free(tmp->key);
		free(tmp->value);
		free(tmp);
	}
}

minishell.h
// heredoc
void			handle_input_loop(int pipe_fd[2], char *delimiter);
int				start_heredoc_process(char *delimiter);
void			free_env_list(t_env *head);

// pipe4
char			**process_quotes_and_redirects(char **argv, t_io *io, t_env *envv);
char			**process_heredocs(char **argv, t_io *io, t_env *envv);
char			**prepare_argv(char *cmd, t_io *io, t_env *envv);
pid_t			execute_with_pipe(char **argv, t_pipe_ctx *pctx,
					t_io *io, t_exec_ctx *ectx);
void			update_fds(t_pipe_ctx *pctx);

// pipe5
void			handle_command(t_cmd_ctx *ctx);
void			init_pipeline_ctx(t_pipeline_ctx *ctx,
					t_env *envv, char **path);
void			execute_pipeline(char **cmds, t_env *envv, char **path);


-----------------------------------------
problem : export "" and export ''

just update this two functions

void	ft_push(t_env *env, char *str)
{
	t_node	*current;
	char	*equal_sign;
	size_t	key_len;
	int		found;

	current = env->top;
	if (ft_strcmp(str, "\"\"") == 0 || ft_strcmp(str, "''") == 0)
	{
		printf("minishell: export: `': not a valid identifier\n");
		return ;
	}
	if (str[0] == '\0' || !is_valid_export_identifier(str))
	{
		write(2, "minishell: export: `", 21);
		write(2, str, ft_strlen(str));
		write(2, "': not a valid identifier\n", 27);
		set_last_exit_status(1);
		return ;
	}
	if(is_valid_export_identifier(str) == 2)
	{
		str = export_whith_plus(str);
	}
	equal_sign = ft_strchr(str, '=');
	if (!equal_sign)
		return ; 
	key_len = equal_sign - str;
	found = update_existing_var(current, str, key_len);
	if (!found)
	{
		add_new_var(env, str);
	}
}


char	**ft_drop_quotes(char **arg, t_env *env)
{
	int		i;
	if ((ft_strcmp(arg[0], "export") == 0) && (arg[1] && (ft_strcmp(arg[1], "\"\"") == 0 || ft_strcmp(arg[1], "''") == 0)))
	{
		return arg;
	}
	char	*expanded;
	if (!arg)
		return (NULL);
	i = 0;
	while (arg[i])
	{
		expanded = expand_variables(arg[i], env);
		free(arg[i]);
		arg[i] = expanded;
		i++;
	}
	return (arg);
}
------------------------------------------------------------------------
--------------------------------------------------
problem export with plus : export test+=value, slove


char *export_whith_plus(char *s)
{
	char str[100];
	int i = 0;
	int j = 0;
	while(s[i])
	{
		if(s[i] != '+')
		{
			str[j] = s[i];
			j++;
		}
		i++;
	}
	str[j]= '\0';
	s = ft_strdup(str);
	//free(s);
	return s;
}

int	is_valid_export_identifier(char *str)
{
	int	i;

	i = 0;
	if (!str || str[0] == '\0')
		return (0);
	if (str[0] == '=')
		return (0);
	if (!ft_isalpha(str[0]) && str[0] != '_')
		return (0);
	while (str[i+1] && str[i] != '=')
	{

		if (!ft_isalnum(str[i]) && str[i] != '_')
		{
			if(str[i] == '+' && str[i+1] == '=')
				return 2;
			return (0);
		}
		i++;
	}
	return (1);
}

void	ft_push(t_env *env, char *str)
{
	t_node	*current;
	char	*equal_sign;
	size_t	key_len;
	int		found;

	current = env->top;
	
	if (str[0] == '\0' || !is_valid_export_identifier(str))
	{
		write(2, "minishell: export: `", 21);
		write(2, str, ft_strlen(str));
		write(2, "': not a valid identifier\n", 27);
		set_last_exit_status(1);
		return ;
	}
	if(is_valid_export_identifier(str) == 2)
	{
		str = export_whith_plus(str);
	}
	equal_sign = ft_strchr(str, '=');
	if (!equal_sign)
		return ; 
	key_len = equal_sign - str;
	found = update_existing_var(current, str, key_len);
	if (!found)
	{
		add_new_var(env, str);
	}
}

end
---------------------------------------------


static void	fork_and_run_child(char *cmd_path, char **argv)
{
	extern char	**environ;

	execve(cmd_path, argv, environ);
	if (errno == ENOEXEC)
	{
		write(2, "minishell: ", 11);
		write(2, argv[0], ft_strlen(argv[0]));
		write(2, ": Permission denied\n", 21);
		exit(126);
	}
	perror("minishell");
	if (errno == ENOEXEC)
		exit(126);
	else if (errno == EACCES)
		exit(126);
	else if (errno == ENOENT)
		exit(127);
	else
		exit(1);
}

Problem 10: export TEST+=a, export TEST-=a, export %, export$?, export ?=2, export 9HOLA=(check  '800 tests pour Minishell' to cover all the cases of export), unset =, unset ===, unset ++++-Lien

UNSET:
static int is_valid_identifier(const char *str)
{
    int i;

    if (!str || !str[0])
        return (0);
    if (!(ft_isalpha(str[0]) || str[0] == '_'))
        return (0);
    i = 1;
    while (str[i])
    {
        if (!(ft_isalnum(str[i]) || str[i] == '_'))
            return (0);
        i++;
    }
    return (1);
}

void ft_drop(t_env *env, char *str)
{
    t_node *current_node = env->top;
    t_node *previous_node = NULL;

    if (!str || !*str || !is_valid_identifier(str))
    {
        write(2, "minishell: unset: `", 19);
        write(2, str, ft_strlen(str));
        write(2, "': not a valid identifier\n", 27);
        set_last_exit_status(1);
        return;
    }

    while (current_node)
    {
        if (ft_strncmp(current_node->value, str, ft_strlen(str)) == 0 &&
            current_node->value[ft_strlen(str)] == '=')
        {
            if (previous_node == NULL)
                env->top = current_node->next;
            else
                previous_node->next = current_node->next;

            free(current_node->value);
            free(current_node);
            return;
        }
        previous_node = current_node;
        current_node = current_node->next;
    }
}

EXPORT
int is_valid_export_identifier(char *str)
{
	int i = 0;

	if (!str || str[0] == '\0') // null or empty string
		return (0);

	if (str[0] == '=')
		return (0);

	// Ensure first character is alpha or '_'
	if (!ft_isalpha(str[0]) && str[0] != '_')
		return (0);

	while (str[i] && str[i] != '=')
	{
		if (!ft_isalnum(str[i]) && str[i] != '_')
			return (0);
		i++;
	}

	return (1);
}


void ft_push(t_env *env, char *str)
{
    t_node *current = env->top;
    char *equal_sign = ft_strchr(str, '=');

    // 🛡️ Call validation function
    if (str[0] == '\0' || !is_valid_export_identifier(str))
    {
        write(2, "minishell: export: `", 21);
        write(2, str, ft_strlen(str));
        write(2, "': not a valid identifier\n", 27);
        set_last_exit_status(1);
        return;
    }

    if (!equal_sign)
        return; // No '=' → ignore or just print var (optional)

    size_t key_len = equal_sign - str;

    // 🔁 Replace existing variable
    while (current)
    {
        if (ft_strncmp(current->value, str, key_len) == 0 && current->value[key_len] == '=')
        {
            free(current->value);
            current->value = ft_strdup(str);
            set_last_exit_status(0);
            return;
        }
        current = current->next;
    }

    // ➕ Add new variable
    t_node *new_node = malloc(sizeof(t_node));
    if (!new_node)
        return;
    new_node->value = ft_strdup(str);
    new_node->next = env->top;
    env->top = new_node;
    set_last_exit_status(0);
}


Problem1: /bin/ls

void	execute_external_command(char **argv, char **path)
{
	char	*command_path;

	if (argv[0] == NULL)
	{
		set_last_exit_status(0);
		return ;
	}
	if (is_path_directory(argv[0]))
		return ;
	if (ft_strchr(argv[0], '/'))
		command_path = ft_strdup(argv[0]);
	else
		command_path = find_command_path(path, argv);
	if (!handle_command_errors(command_path, argv[0]))
		return ;
	run_child_process(command_path, argv);
}

Problem2: echo "cat lol.c | cat > lol.c"


int	has_unquoted_pipe(const char *str)
{
	char	quote;
	size_t	i;

	quote = 0;
	i = 0;
	while (str[i])
	{
		if ((str[i] == '\'' || str[i] == '\"') && quote == 0)
			quote = str[i];
		else if (str[i] == quote)
			quote = 0;
		else if (str[i] == '|' && quote == 0)
			return (1);
		i++;
	}
	return (0);
}

Problem3: exit 42, exit aa, exit 42 2

int	is_numeric(const char *str)
{
	int	i;

	i = 0;
	if (!str)
		return (0);
	if (str[0] == '-' || str[0] == '+')
		i++;
	while (str[i])
	{
		if (!isdigit((unsigned char)str[i]))
			return (0);
		i++;
	}
	return (1);
}

void	exit_shell(char **argv)
{
	int	status;

	status = 0;
	printf("exit\n");
	if (argv[1])
	{
		if (!is_numeric(argv[1]))
		{
			printf("exit: %s: numeric argument required\n", argv[1]);
			exit(2);
		}
		if (argv[2])
		{
			printf("exit: too many arguments\n");
			set_last_exit_status(1);
			return ;
		}
		status = atoi(argv[1]) % 256;
		exit(status);
	}
	exit(get_last_exit_status());
}

Problem 4: echo hello	world

static size_t	skip_spaces(const char *input, size_t i)
{
	while (input[i] == ' ' || input[i] == '\t' || input[i] == '\n'
		|| input[i] == '\v' || input[i] == '\f' || input[i] == '\r')
		i++;
	return (i);
}

static int	handle_plain_text(const char **input, char **result)
{
	const char	*start;
	size_t		i;

	start = *input;
	i = 0;
	while (start[i] && start[i] != '$'
		&& start[i] != '\''
		&& start[i] != '"'
		&& !(start[i] == ' '
			|| ((unsigned char)start[i] >= 9
				&& (unsigned char)start[i] <= 13)))
	{
		i++;
	}
	return (append_segment(input, result, i));
}


Problem 5: $?

static void	fork_and_run_child(char *cmd_path, char **argv)
{
	extern char	**environ;

	execve(cmd_path, argv, environ);
	perror("minishell");
	if (errno == ENOEXEC)
		exit(126);
	else if (errno == EACCES)
		exit(126);
	else if (errno == ENOENT)
		exit(127);
	else
		exit(1);
}

Problem 6 & 7: cat < in << END < out; cat < in << aaaa < out

+ Pay attention: change the function in minishell.h from 'void ft_double_redirect(char **path, char **argv' to 'int ft_double_redirect(char **path, char **argv)'

+ Add in function of 'remove_empty_args(char **argv)' and update other functions like this:
char	**remove_empty_args(char **argv)
{
	char	**result;
	int		count;
	int		i;
	int		j;

	count = 0;
	i = 0;
	while (argv[i])
	{
		if (argv[i][0] != '\0')
			count++;
		i++;
	}
	result = malloc(sizeof(char *) * (count + 1));
	if (!result)
		return (NULL);
	i = 0;
	j = 0;
	while (argv[i])
	{
		if (argv[i][0] != '\0')
			result[j++] = ft_strdup(argv[i]);
		i++;
	}
	result[j] = NULL;
	return (result);
}

void	handle_input_loop(int pipe_fd[2], char *delimiter)
{
	char	*input;

	while (1)
	{
		input = readline("> ");
		if (!input || ft_strcmp(input, delimiter) == 0)
		{
			free(input);
			break ;
		}
		write(pipe_fd[1], input, ft_strlen(input));
		write(pipe_fd[1], "\n", 1);
		free(input);
	}
	close(pipe_fd[1]);
}

int	ft_double_redirect(char **path, char **argv)
{
	int	pipe_fd[2];

	(void)path;
	if (pipe(pipe_fd) == -1)
	{
		perror("pipe");
		return (-1);
	}
	handle_input_loop(pipe_fd, argv[2]);
	return (pipe_fd[0]);
}

void handle_user_input(char *inputt, char **argv, t_env *envv, char **path)
{
    int in_fd = -1, out_fd = -1;
    int last_input_fd = -1;

    add_history(inputt);

    argv = ft_split_args(inputt);
    argv = ft_drop_quotes(argv, envv);

    // Handle pipes first
    if (has_unquoted_pipe(inputt))
    {
        char **cmds = ft_split(inputt, '|');
        execute_pipeline(cmds, envv, path);
        free_split(cmds);
        free_split(argv);
        return;
    }

    // Loop to handle all input redirections and apply the last one
    int i = 0;
    while (argv[i])
    {
        if (ft_strcmp(argv[i], "<") == 0 && argv[i + 1])
        {
            int fd = open(argv[i + 1], O_RDONLY);
            if (fd < 0)
	    {
    		printf("minishell: %s: %s\n", argv[i + 1], strerror(errno));
    		free_split(argv);
    		return;
	    }
            if (last_input_fd != -1)
                close(last_input_fd);
            last_input_fd = fd;

            argv[i][0] = '\0';
            argv[i + 1][0] = '\0';
            i += 2;
        }
        else if (ft_strcmp(argv[i], "<<") == 0 && argv[i + 1])
        {
            char *temp_argv[4] = {argv[0], argv[i], argv[i + 1], NULL};
            int fd = ft_double_redirect(path, temp_argv);
            if (fd == -1)
            {
                perror("heredoc failed");
                free_split(argv);
                return;
            }
            if (last_input_fd != -1)
                close(last_input_fd);
            last_input_fd = fd;

            argv[i][0] = '\0';
            argv[i + 1][0] = '\0';
            i += 2;
        }
        else
        {
            i++;
        }
    }

    // Remove empty args after hiding redirection tokens
    char **cleaned_args = remove_empty_args(argv);
    free_split(argv);

    // Save original stdin/stdout
    int saved_stdin = dup(STDIN_FILENO);
    int saved_stdout = dup(STDOUT_FILENO);

    // Handle output redirection (e.g. >, >>)
    char **cleaned_argv = handle_redirection(cleaned_args, &in_fd, &out_fd, envv);
    free_split(cleaned_args);

    if (!cleaned_argv)
    {
        dup2(saved_stdin, STDIN_FILENO);
        dup2(saved_stdout, STDOUT_FILENO);
        close(saved_stdin);
        close(saved_stdout);
        return;
    }

    // Apply final input redirection (either < or <<)
    if (last_input_fd != -1)
    {
        dup2(last_input_fd, STDIN_FILENO);
        close(last_input_fd);
    }

    // Apply output redirection
    if (out_fd != -1)
    {
        if (out_fd < 0)
        {
            perror("Failed to open output redirection file");
            goto cleanup;
        }
        dup2(out_fd, STDOUT_FILENO);
    }

    execute_command_based_on_input(cleaned_argv, envv, path);

cleanup:
    dup2(saved_stdin, STDIN_FILENO);
    dup2(saved_stdout, STDOUT_FILENO);
    close(saved_stdin);
    close(saved_stdout);
    if (in_fd != -1) close(in_fd);
    if (out_fd != -1) close(out_fd);
    free_split(cleaned_argv);
}


Problem 8: export: add in 'declare  -x' and list of env with alphabet order
void ft_printf_env(t_env *env, int o)
{
    t_node *node = env->top;
    char **str = malloc(sizeof(char *) * (env->size + 2));
    if (!str) {
        perror("malloc failed");
        return;
    }

    int i = 0;
    while (node)
    {
        str[i] = ft_strdup(node->value);
        if (!str[i])
        {
            perror("ft_strdup failed");
            free(str);
            return;
        }
        i++;
        node = node->next;
    }
    str[i] = NULL;
    i = env->size - 1;
	if ( o == 1)
	{
		str = put_char_in_order(str);
	}
    while (i >= 0)
    {
		if ( o == 1)
        	printf("declare -x %s\n", str[i]);
		else
			printf("%s\n", str[i]);
        free(str[i]);
        i--;
    }
    free(str);
}

void	ft_echanger(char **a, char **b)
{
	char	*temp;

	temp = *a;
	*a = *b;
	*b = temp;
}

char	**put_char_in_order(char **str)
{
	int	i;
	int	j;
	int	swapped;

	i = 0;
	while (i < (ft_strlenn(str) - 1))
	{
		j = 0;
		swapped = 0;
		while (j < ((ft_strlenn(str) - 1) - i))
		{
			if (ft_strcmp(str[j], str[j + 1]) < 0)
			{
				ft_echanger(&(str[j]), &(str[j + 1]));
				swapped = 1;
			}
			j++;
		}
		if (swapped == 0)
			break ;
		i++;
	}
	return (str);
}

Problem 9: cat | cat | ls - Ibyeo
void execute_pipeline(char **cmds, t_env *envv, char **path)
{
    int i = 0;
    int pipefd[2];
    int prev_fd = -1;
    pid_t pids[256]; // Enough for a long pipeline
    int pid_index = 0;

    while (cmds[i])
    {
        char **argv = ft_split_args(cmds[i]);
        argv = ft_drop_quotes(argv, envv);

        int in_fd = -1, out_fd = -1;
        argv = handle_redirection(argv, &in_fd, &out_fd, envv);

        if (cmds[i + 1] && pipe(pipefd) == -1)
        {
            perror("pipe");
            exit(EXIT_FAILURE);
        }

        pid_t pid = fork();
        if (pid == 0)
        {
            // Input from previous command
            if (prev_fd != -1)
            {
                dup2(prev_fd, STDIN_FILENO);
                close(prev_fd);
            }

            // Output to next pipe
            if (cmds[i + 1])
            {
                dup2(pipefd[1], STDOUT_FILENO);
                close(pipefd[0]);
                close(pipefd[1]);
            }
            else if (out_fd != -1) // Last command with redirection
            {
                dup2(out_fd, STDOUT_FILENO);
                close(out_fd);
            }

            if (in_fd != -1 && prev_fd == -1)
            {
                dup2(in_fd, STDIN_FILENO);
                close(in_fd);
            }

            char *exec_path = find_command_path(path, argv);
            if (exec_path)
                execve(exec_path, argv, NULL);
            perror("execve");
            exit(EXIT_FAILURE);
        }

        // Parent process
        pids[pid_index++] = pid;

        if (prev_fd != -1)
            close(prev_fd);
        if (cmds[i + 1])
        {
            close(pipefd[1]);     // Close write end
            prev_fd = pipefd[0];  // Save read end for next command
        }

        free_split(argv);
        i++;
    }

    for (int j = 0; j < pid_index; j++)
        waitpid(pids[j], NULL, 0);
}

Problem 11:

// new function 

void	free_path(char **split)
{
	int	i;

	if (!split)
		return ;
	i = 0;
	while (split[i])
	{
		free(split[i]);
		i++;
	}
}

int	handle_builtin_commands2(char **argv, t_env *envv, char ***path)
{
	if (ft_strncmp(argv[0], "export", 7) == 0)
	{
		if (ft_strlenn(argv) >= 2)
			ft_push(envv, argv[1]);
		else
			ft_printf_env(envv, 1);
		envv->exit_status = 0;
		return (1);
	}
	else if (ft_strncmp(argv[0], "unset", 6) == 0)
	{
		if (argv[1])
		{
			ft_drop(envv, argv[1]);
			if (ft_strncmp(argv[1], "PATH", 5) == 0)
			{
				free_path(*path);
				*path = malloc(3 * sizeof(char *));
                if (*path == NULL)
                {
                    perror("malloc");
                    return (1);
                }
                (*path)[0] = ft_strdup("/usr/");
                (*path)[1] = NULL;
			}
		}
		envv->exit_status = 0;
		return (1);
	}
	else if (ft_strncmp(argv[0], "exit", 5) == 0)
	{
		exit_shell(argv);
		envv->exit_status = 0;
		return (1);
	}
	return (0);
}

Problem12: sleep 3 | sleep 3 | sleep 3 ( 3 cases like in the '800 tests pour Minishell'); sleep 3 | sleep 3; time sleep 3 | sleep 3; Problem 13: cat /dev/urandom | head -n 1-Lien

void execute_pipeline(char **cmds, t_env *envv, char **path)
{
	int i = 0;
	int pipefd[2];
	int prev_fd = -1;
	pid_t *pids = malloc(sizeof(pid_t) * 256);
	int pid_index = 0;

	while (cmds[i])
	{
		char **argv = ft_split_args(cmds[i]);
		if (!argv)
			continue;

		argv = ft_drop_quotes(argv, envv);
		int in_fd = -1, out_fd = -1;
		argv = handle_redirection(argv, &in_fd, &out_fd, envv);

		if (cmds[i + 1] && pipe(pipefd) == -1)
		{
			perror("pipe");
			exit(EXIT_FAILURE);
		}

		pid_t pid = fork();
		if (pid == -1)
		{
			perror("fork");
			exit(EXIT_FAILURE);
		}
		if (pid == 0)
		{
			// --- CHILD PROCESS ---

			// Setup stdin
			if (prev_fd != -1)
			{
				dup2(prev_fd, STDIN_FILENO);
				close(prev_fd);
			}
			else if (in_fd != -1)
			{
				dup2(in_fd, STDIN_FILENO);
				close(in_fd);
			}

			// Setup stdout
			if (cmds[i + 1])
			{
				dup2(pipefd[1], STDOUT_FILENO);
			}
			else if (out_fd != -1)
			{
				dup2(out_fd, STDOUT_FILENO);
			}

			// Close unused FDs
			if (cmds[i + 1])
			{
				close(pipefd[0]);
				close(pipefd[1]);
			}
			if (out_fd != -1 && cmds[i + 1] == NULL)
				close(out_fd);
			if (in_fd != -1 && prev_fd == -1)
				close(in_fd);

			execute_command_based_on_input(argv, envv, path);
			free_split(argv);
			exit(envv->exit_status);
		}

		// --- PARENT PROCESS ---
		pids[pid_index++] = pid;

		if (prev_fd != -1)
			close(prev_fd);
		if (cmds[i + 1])
		{
			close(pipefd[1]);       // Close write end
			prev_fd = pipefd[0];    // Keep read end for next command
		}

		free_split(argv);
		i++;
	}

	// Wait for all children, store status of the last one
	for (int j = 0; j < pid_index; j++)
	{
		int wstatus;
		waitpid(pids[j], &wstatus, 0);
		if (j == pid_index - 1)
			envv->exit_status = WIFEXITED(wstatus) ? WEXITSTATUS(wstatus) : 1;
	}

	free(pids);
}

Problem 14: cat << EOF (see the photos to understand the problem when type Ctrl-C after doing  the heredoc) - Lien (Lien already solved)
int ft_double_redirect(char **path, char **argv)
{
	(void)path;
	int pipe_fd[2];

	if (pipe(pipe_fd) == -1)
	{
		perror("pipe");
		return -1;
	}

	pid_t pid = fork();
	if (pid == -1)
	{
		perror("fork");
		return -1;
	}
	else if (pid == 0)
	{
		// In child: handle heredoc input
		signal(SIGINT, SIG_DFL); // Restore default behavior
		close(pipe_fd[0]);       // Close read end
		handle_input_loop(pipe_fd, argv[2]);		
		exit(0);
	}
	else
	{
		int status;
		close(pipe_fd[1]); // Close write end in parent
		waitpid(pid, &status, 0);

		if (WIFSIGNALED(status) && WTERMSIG(status) == SIGINT)
		{
			// Child was interrupted by Ctrl-C
			close(pipe_fd[0]);
			return -2;
		}
		// Success: return read-end of pipe to be used as stdin
		return pipe_fd[0];
	}
}
void handle_user_input(char *inputt, char **argv, t_env *envv, char **path)
{
    int in_fd = -1, out_fd = -1;
    int last_input_fd = -1;

    add_history(inputt);

    argv = ft_split_args(inputt);
    argv = ft_drop_quotes(argv, envv);

    // Handle pipes first
    if (has_unquoted_pipe(inputt))
    {
        char **cmds = ft_split(inputt, '|');
        execute_pipeline(cmds, envv, path);
        free_split(cmds);
        free_split(argv);
        return;
    }

    // Loop to handle all input redirections and apply the last one
    int i = 0;
    while (argv[i])
    {
        if (ft_strcmp(argv[i], "<") == 0 && argv[i + 1])
        {
            int fd = open(argv[i + 1], O_RDONLY);
            if (fd < 0)
	    {
    		printf("minishell: %s: %s\n", argv[i + 1], strerror(errno));
    		free_split(argv);
    		return;
	    }
            if (last_input_fd != -1)
                close(last_input_fd);
            last_input_fd = fd;

            argv[i][0] = '\0';
            argv[i + 1][0] = '\0';
            i += 2;
        }
        else if (ft_strcmp(argv[i], "<<") == 0 && argv[i + 1])
        {
            char *temp_argv[4] = {argv[0], argv[i], argv[i + 1], NULL};
            int fd = ft_double_redirect(path, temp_argv);
            if (fd == -1)
            {
                perror("heredoc failed");
                free_split(argv);
                return;
            }
	    if (fd == -2)
	    {
		envv->exit_status = 130; // Ctrl-C
		return;
	    }
            if (last_input_fd != -1)
                close(last_input_fd);
            last_input_fd = fd;

            argv[i][0] = '\0';
            argv[i + 1][0] = '\0';
            i += 2;
        }
        else
        {
            i++;
        }
    }

    // Remove empty args after hiding redirection tokens
    char **cleaned_args = remove_empty_args(argv);
    free_split(argv);

    // Save original stdin/stdout
    int saved_stdin = dup(STDIN_FILENO);
    int saved_stdout = dup(STDOUT_FILENO);

    // Handle output redirection (e.g. >, >>)
    char **cleaned_argv = handle_redirection(cleaned_args, &in_fd, &out_fd, envv);
    free_split(cleaned_args);

    if (!cleaned_argv)
    {
        dup2(saved_stdin, STDIN_FILENO);
        dup2(saved_stdout, STDOUT_FILENO);
        close(saved_stdin);
        close(saved_stdout);
        return;
    }

    // Apply final input redirection (either < or <<)
    if (last_input_fd != -1)
    {
        dup2(last_input_fd, STDIN_FILENO);
        close(last_input_fd);
    }

    // Apply output redirection
    if (out_fd != -1)
    {
        if (out_fd < 0)
        {
            perror("Failed to open output redirection file");
            goto cleanup;
        }
        dup2(out_fd, STDOUT_FILENO);
    }

    execute_command_based_on_input(cleaned_argv, envv, path);

cleanup:
    dup2(saved_stdin, STDIN_FILENO);
    dup2(saved_stdout, STDOUT_FILENO);
    close(saved_stdin);
    close(saved_stdout);
    if (in_fd != -1) close(in_fd);
    if (out_fd != -1) close(out_fd);
    free_split(cleaned_argv);
}

Problem 15: :, !, <, >, <<, <<, <>, <<<<<, <<<<<<<<<<<<<, pipe: | |, | | |, | | | |, >>|><,  OR:|, ||, |||, AND: &&, &&&&, &&&&&&&&, :  give message like 'bash: syntax error' near unexpected token `newline'', bash: syntax error near unexpected token `<<', bash: syntax error near unexpected token `<<<',  'bash: syntax error near unexpected token `|'',  bash: syntax error near unexpected token `||', bash: syntax error near unexpected token `||', bash: syntax error near unexpected token `&&'-Lien (Lien already solved)

Add in these functions and update read_full_line function like below:
int	ft_isspace(char c)
{
	return (
		c == ' '  || // space
		c == '\t' || // horizontal tab
		c == '\n' || // newline
		c == '\v' || // vertical tab
		c == '\f' || // form feed
		c == '\r'    // carriage return
	);
}

int redirection_syntax_error_token(const char *line)
{
    int i = 0;
    int single_gt_count = 0;

    while (line[i])
    {
        while (line[i] && ft_isspace(line[i]))
            i++;
        // Detect '>>'
        if (line[i] == '>' && line[i + 1] == '>')
        {
            i += 2;
            single_gt_count = 0; // reset counter
            while (line[i] && ft_isspace(line[i]))
                i++;
            // Check if next is again '>>' => too many
            if (line[i] == '>' && line[i + 1] == '>')
                return 2; // syntax error near `>>`
        }
        // Detect single '>'
        else if (line[i] == '>' && line[i + 1] != '>')
        {
            single_gt_count++;
            i++;
            if (single_gt_count >= 2)
                return 1; // syntax error near `>`

            while (line[i] && ft_isspace(line[i]))
                i++;        }
        else
        {
            single_gt_count = 0; // reset if not '>'
            i++;
        }
    }
    return 0; // valid syntax
}

int has_invalid_heredoc(const char *line)
{
    int i = 0;

    while (line[i])
    {
        if (line[i] == '<')
        {
            int count = 0;
            while (line[i] == '<')
            {
                count++;
                i++;
            }
            if (count >= 3)
                return (1);
        }
        else
            i++;
    }
    return (0);
}


const char *skip_spacess(const char *str)
{
    while (*str && ft_isspace(*str))
        str++;
    return str;
}

int has_invalid_or_usage(const char *line)
{
    const char *p = skip_spacess(line);

    while (*p)
    {
        if (*p == '|')
        {
            int or_count = 0;

            // Count how many '|' appear consecutively
            while (*p == '|')
            {
                or_count++;
                p++;
            }

            if (or_count >= 2)
            {
                // After '||...' if end of input or invalid token
                p = skip_spacess(p);
                if (*p == '\0' || *p == '|' || *p == '&')
                    return 2; // consistent signal for `||` error
                return 2; // even if something valid comes after
            }
        }
        else
        {
            p++;
        }
    }

    return 0;
}

int has_invalid_pipe_syntax(const char *line)
{
    int i = 0;

    // Skip leading spaces
    while (line[i] && ft_isspace(line[i]))
        i++;

    if (line[i] == '|')
        return 1; // Starts with pipe

    while (line[i])
    {
        if (line[i] == '|')
        {
            // Pipe without word before or after
            int j = i + 1;
            while (line[j] && ft_isspace(line[j]))
                j++;

            if (line[j] == '\0' || line[j] == '|')
                return 1; // Ends with pipe or double pipe

            // Also handle weird patterns like >>|><
            if (i > 0 && (line[i - 1] == '>' || line[i - 1] == '<'))
                return 1;
            if (line[j] == '>' || line[j] == '<')
                return 1;

            i++;
        }
        else
        {
            i++;
        }
    }

    return 0; // Valid pipe usage
}

int has_invalid_and_usage(const char *line)
{
    const char *p = skip_spacess(line);

    while (*p)
    {
        if (*p == '&')
        {
            int and_count = 0;
            while (*p == '&')
            {
                and_count++;
                p++;
            }

            // If we have 2 or more '&', it's invalid
            if (and_count >= 2)
            {
                p = skip_spacess(p);
                if (*p == '\0' || *p == '&' || *p == '|')
                    return 1; // Invalid `&&` usage detected
            }
        }
        else
        {
            p++;
        }
    }
    return 0; // No invalid `&&` usage
}

char	*handle_null_line(void)
{
	printf("exit\n");
	rl_clear_history();
	set_last_exit_status(0);
	exit(get_last_exit_status());
}

char	*free_and_null(char *line)
{
	free(line);
	return (NULL);
}


char *read_full_line(void)
{
    char *line;

    line = readline("minishell$ ");
    if (!line)
    {
        printf("exit\n");
        rl_clear_history();
        set_last_exit_status(0);
        exit(get_last_exit_status());
    }
    if (ft_strcmp(line, ":") == 0 || ft_strcmp(line, "!") == 0) 
    {
    	return NULL;
    }
    int err_code = redirection_syntax_error_token(line);
    if (err_code == 1)
    {
        printf("minishell: syntax error near unexpected token `>'\n");
        free(line);
        return NULL;
    }
    else if (err_code == 2)
    {
        printf("minishell: syntax error near unexpected token `>>'\n");
        free(line);
        return NULL;
    }
    if (has_unclosed_quote(line))
    {
        printf("minishell: syntax error: unclosed quote\n");
        set_last_exit_status(2);
        free(line);		
        return (NULL);
    }

    // Handle special cases matching Bash behavior
    if (ft_strcmp(line, "<") == 0 || ft_strcmp(line, ">") == 0 || 
        ft_strcmp(line, "<<") == 0 || ft_strcmp(line, ">>") == 0 || 
        ft_strcmp(line, "<>") == 0)
    {
        printf("minishell: syntax error near unexpected token `newline'\n");
        set_last_exit_status(2);
        free(line);
        return (NULL);
    }

    if (has_invalid_heredoc(line))
    {
        printf("minishell: syntax error near unexpected token `<<'\n");
        set_last_exit_status(2);
        free(line);
        return (NULL);
    }
    int err = has_invalid_or_usage(line);
    if (err == 2)
    {
        printf("minishell: syntax error near unexpected token `||'\n");
        set_last_exit_status(2);
        free(line);
        return (NULL);
    }
    if (has_invalid_pipe_syntax(line))
    {
        printf("minishell: syntax error near unexpected token `|'\n");
        set_last_exit_status(2);
        free(line);
        return (NULL);
    }

    else if (has_invalid_and_usage(line))
    {
        printf("minishell: syntax error near unexpected token `&&'\n");
        set_last_exit_status(2);
        free(line);
        return (NULL);
    }
    return (line);
}

Problem 16: 
echo $"HOME"
echo $"HO""ME"
echo $'HOME'
echo $'HO''ME'
Output: HOME

In process_quote_or_dollar, replace this:

else if (**input == '$' && *(*input + 1) == '"')
{
	*input += 2;
	if (!handle_quoted_expansion(input, envv, result, '"'))
		return (0);
}
With this:

else if (**input == '$' && *(*input + 1) == '"')
{
	(*input)++;
}

static int	process_quote_or_dollar(const char **input, t_env *envv,
		char **result)
{
	if (**input == '\'')
	{
		if (!handle_single_quotes(input, result))
			return (0);	
	}
	else if (**input == '$' && *(*input + 1) == '"')
	{
		(*input)++;
	}
	else if (**input == '"')
	{
		if (!handle_quoted_expansion(input, envv, result, '"'))
			return (0);
	}
	else if (**input == '$')
	{
		if (!handle_dollar_sign(input, envv, result))
			return (0);
	}
	return (1);
}
Problem 17: "$HOMEsfdslbbdldbln", $LESS$VAR, $?$?-> 00:command not found -Lien

Problem 18: export | grep "HOME" (Lien already solved)
void execute_pipeline(char **cmds, t_env *envv, char **path)
{
	int i = 0;
	int pipefd[2];
	int prev_fd = -1;
	pid_t pids[256];
	int pid_index = 0;

	while (cmds[i])
	{
		char **argv = ft_split_args(cmds[i]);
		argv = ft_drop_quotes(argv, envv);

		int in_fd = -1, out_fd = -1;
		argv = handle_redirection(argv, &in_fd, &out_fd, envv);

		if (cmds[i + 1] && pipe(pipefd) == -1)
		{
			perror("pipe");
			exit(EXIT_FAILURE);
		}

		pid_t pid = fork();
		if (pid == 0)
		{
			// --- CHILD PROCESS ---
			if (prev_fd != -1)
			{
				dup2(prev_fd, STDIN_FILENO);
				close(prev_fd);
			}
			if (cmds[i + 1])
			{
				dup2(pipefd[1], STDOUT_FILENO);
				close(pipefd[0]);
				close(pipefd[1]);
			}
			else if (out_fd != -1)
			{
				dup2(out_fd, STDOUT_FILENO);
				close(out_fd);
			}
			if (in_fd != -1 && prev_fd == -1)
			{
				dup2(in_fd, STDIN_FILENO);
				close(in_fd);
			}

			// Execute builtins or external
			execute_command_based_on_input(argv, envv, path);
			free_split(argv);
			exit(envv->exit_status);
		}

		// --- PARENT PROCESS ---
		pids[pid_index++] = pid;
		if (prev_fd != -1)
			close(prev_fd);
		if (cmds[i + 1])
		{
			close(pipefd[1]);
			prev_fd = pipefd[0];
		}

		free_split(argv);
		i++;
	}

	for (int j = 0; j < pid_index; j++)
		waitpid(pids[j], NULL, 0);
}

