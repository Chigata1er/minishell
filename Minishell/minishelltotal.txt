Makefile:

NAME = minishell

CC = gcc
CFLAGS = -Wall -Wextra -Werror
SRC = main.c parser.c executor.c builtins.c
OBJ = $(SRC:.c=.o)

LIBFT_DIR = ./libft
LIBFT = $(LIBFT_DIR)/libft.a

LIBS = -lreadline -lncurses

all: $(NAME)

$(NAME): $(OBJ)
	@make -C $(LIBFT_DIR)
	$(CC) $(CFLAGS) $(OBJ) $(LIBFT) -o $(NAME) $(LIBS)

clean:
	@make clean -C $(LIBFT_DIR)
	rm -f $(OBJ)

fclean: clean
	@make fclean -C $(LIBFT_DIR)
	rm -f $(NAME)

re: fclean all

.PHONY: all clean fclean re

Minishell.h:
#ifndef MINISHELL_H
# define MINISHELL_H

# include <stdio.h>
# include <stdlib.h>
# include <unistd.h>
# include <fcntl.h>
# include <signal.h>
# include <string.h>
# include <sys/wait.h>
# include <sys/types.h>
# include <sys/stat.h>
# include <dirent.h>
# include <errno.h>
# include <readline/readline.h>
# include <readline/history.h>

// Structure for shell state
typedef struct s_shell
{
    char    *input;           // User input
    char    **args;           // Parsed arguments
    char    **env;            // Environment variables
    int     last_exit_status; // Last command exit status
}	t_shell;

void    init_shell(t_shell *shell, char **env);

void    parse_input(t_shell *shell);
void    expand_variables(t_shell *shell);
char    **split_pipes(char *input); // Function to split pipes
char *ft_strjoin3(const char *s1, const char *s2, const char *s3);

void	   execute_command(t_shell *shell);
void    execute_pipeline(t_shell *shell, char **cmds);
void    handle_redirections(t_shell *shell);

int     ft_echo(char **args);
int 	ft_cd(t_shell *shell, char **args);
int     ft_pwd(void);
int     ft_export(t_shell *shell, char **args);
int 	ft_unset(t_shell *shell, char **args);
int 	ft_env(char **env);
int     ft_exit(char **args);

void    signal_handler(int sig);

#endif

main.c:
#include "minishell.h"
#include <readline/readline.h>
#include <readline/history.h>

void signal_handler(int sig)
{
    if (sig == SIGINT)
    {
        rl_on_new_line();
        rl_replace_line("", 0);
        rl_redisplay();
    }
}

void init_shell(t_shell *shell, char **env)
{
    shell->env = env;
    shell->input = NULL;
}

int main(int argc, char **argv, char **env)
{
    t_shell shell;

    (void)argc;
    (void)argv;
    init_shell(&shell, env);

    signal(SIGINT, signal_handler);
    signal(SIGQUIT, SIG_IGN);

    while (1)
    {
        shell.input = readline("minishell$ ");
        if (!shell.input)
            break;
        if (*shell.input)
            add_history(shell.input);
        parse_input(&shell);
        execute_command(&shell);
        free(shell.input);
    }
    return (0);
}

executor.c:
#include "minishell.h"
#include "libft/libft.h"

void parse_quotes(t_shell *shell)
{
    int i = 0;
    while (shell->args[i])
    {
        char *arg = shell->args[i];
        char *new_arg = malloc(strlen(arg) + 1); // Allocate space for the new string.
        if (!new_arg) // Check for memory allocation failure.
        {
            perror("malloc");
            return;
        }
        int j = 0;
        int in_single_quote = 0;
        int in_double_quote = 0;

        // Loop through each character of the argument
        for (int k = 0; arg[k] != '\0'; k++)
        {
            char ch = arg[k];
            
            // Toggle single quote handling
            if (ch == '\'' && !in_double_quote)
                in_single_quote = !in_single_quote;
            // Toggle double quote handling
            else if (ch == '"' && !in_single_quote)
                in_double_quote = !in_double_quote;
            else
            {
                if (in_single_quote || in_double_quote || (ch != '\'' && ch != '"'))
                    new_arg[j++] = ch; // Only copy non-quote characters.
            }
        }
        new_arg[j] = '\0';

        // Free the old argument and replace it with the new one
        free(shell->args[i]);
        shell->args[i] = new_arg;

        i++;
    }
}

void handle_redirections(t_shell *shell)
{
    int i = 0;
    while (shell->args[i])
    {
        if (strcmp(shell->args[i], ">") == 0) // Output redirection
        {
            int fd = open(shell->args[i + 1], O_CREAT | O_WRONLY | O_TRUNC, 0644);
            if (fd == -1)
            {
                perror("open");
            }
            else
            {
                printf("Redirecting output to: %s\n", shell->args[i + 1]); // Debug print
                dup2(fd, STDOUT_FILENO);  // Redirect stdout
                close(fd);
                shell->args[i] = NULL;    // Remove redirection part from args
                break; // Once redirection is handled, exit loop
            }
        }
        else if (strcmp(shell->args[i], ">>") == 0) // Append mode
        {
            int fd = open(shell->args[i + 1], O_CREAT | O_WRONLY | O_APPEND, 0644);
            if (fd == -1)
            {
                perror("open");
            }
            else
            {
                printf("Appending output to: %s\n", shell->args[i + 1]); // Debug print
                dup2(fd, STDOUT_FILENO);  // Redirect stdout in append mode
                close(fd);
                shell->args[i] = NULL;    // Remove redirection part from args
                break; // Once redirection is handled, exit loop
            }
        }
        else if (strcmp(shell->args[i], "<") == 0) // Input redirection
        {
            int fd = open(shell->args[i + 1], O_RDONLY);
            if (fd == -1)
            {
                perror("open");
            }
            else
            {
                printf("Redirecting input from: %s\n", shell->args[i + 1]); // Debug print
                dup2(fd, STDIN_FILENO);  // Redirect stdin
                close(fd);
                shell->args[i] = NULL;    // Remove redirection part from args
                break; // Once redirection is handled, exit loop
            }
        }
else if (strcmp(shell->args[i], "<<") == 0) // Here-document
{
    char *delimiter = shell->args[i + 1];
    int pipefd[2];
    pipe(pipefd);

    // Debug print for delimiter
    printf("Starting here-document with delimiter: '%s'\n", delimiter); // Debug print

    char *line;
    while ((line = readline("> ")) != NULL)
    {
        // Remove trailing newline from line before comparison
        line[strcspn(line, "\n")] = 0;

        // Compare the trimmed line with the delimiter
        if (strcmp(line, delimiter) == 0)
            break;  // Break when the delimiter is matched

        // Write the input line to the pipe
        write(pipefd[1], line, strlen(line));  
        write(pipefd[1], "\n", 1);  // Add newline after each line
        free(line);
    }

    close(pipefd[1]);  // Close the pipe's writing end
    dup2(pipefd[0], STDIN_FILENO);  // Redirect stdin from the pipe's reading end
    close(pipefd[0]);  // Close the pipe's reading end
    shell->args[i] = NULL;    // Remove here-doc part from args
    break; // Once here-document redirection is handled, exit loop
}

        i++;
    }
}

void execute_command(t_shell *shell)
{
    if (!shell->args || !shell->args[0])
        return;

    // Handle builtins first
    if (ft_strcmp(shell->args[0], "exit") == 0)
        exit(0);
    else if (ft_strcmp(shell->args[0], "cd") == 0)
        ft_cd(shell, shell->args);
    else if (ft_strcmp(shell->args[0], "pwd") == 0)
        ft_pwd();
    else if (ft_strcmp(shell->args[0], "env") == 0)
        ft_env(shell->env);
    else
    {
        // Handle redirections before execution
        handle_redirections(shell);

        pid_t pid = fork();
        if (pid == 0)
        {
            // Execute command
            execvp(shell->args[0], shell->args);
            perror("minishell");
            exit(127);
        }
        else
            waitpid(pid, NULL, 0);
    }
}

void execute_pipeline(t_shell *shell, char **cmds)
{
    int i = 0, fd[2], in_fd = 0;
    pid_t pid;

    while (cmds[i])
    {
        pipe(fd);  // Create a pipe for the current command
        if ((pid = fork()) == 0)  // Child process
        {
            dup2(in_fd, STDIN_FILENO);  // Redirect stdin to previous pipe output (if any)
            if (cmds[i + 1])  // If there's another command in the pipeline
                dup2(fd[1], STDOUT_FILENO);  // Redirect stdout to the current pipe

            close(fd[0]);  // Close the read end of the pipe in the child
            execute_command(shell);  // Execute the current command
            exit(0);  // Child process exits
        }
        else  // Parent process
        {
            close(fd[1]);  // Close the write end of the current pipe
            in_fd = fd[0];  // Update in_fd to read from the current pipe for the next command
            i++;
        }
    }
    while (wait(NULL) > 0);  // Wait for all child processes to terminate
}

parser.c:
#include "minishell.h"

void expand_variables(t_shell *shell)
{
    int i = 0;
    while (shell->args[i])
    {
        if (shell->args[i][0] == '$')
        {
            char *varname = shell->args[i] + 1;
            char *value = getenv(varname);
            shell->args[i] = value ? strdup(value) : strdup("");
        }
        else if (strcmp(shell->args[i], "$?") == 0)
        {
            char exit_status[10];
            sprintf(exit_status, "%d", shell->last_exit_status);
            shell->args[i] = strdup(exit_status);
        }
        i++;
    }
}

void parse_input(t_shell *shell)
{
    shell->args = malloc(sizeof(char *) * 10); // Temporary
    if (!shell->args)
        return;
    shell->args[0] = strtok(shell->input, " ");
    int i = 1;
    while ((shell->args[i] = strtok(NULL, " ")))
        i++;
    expand_variables(shell);
}

builtins.c:
#include "minishell.h"
#include "libft/libft.h"
#include <stdlib.h>
#include <string.h>

char *ft_strndup(const char *s, size_t n)
{
    char *dup = malloc(n + 1);
    if (!dup)
        return NULL;
    strncpy(dup, s, n);
    dup[n] = '\0';
    return dup;
}

int ft_echo(char **args)
{
    int i = 1;
    int newline = 1;

    // Check for the `-n` option
    if (args[i] && !ft_strncmp(args[i], "-n", 3))
    {
        newline = 0;
        i++;
    }

    // Print remaining arguments
    while (args[i])
    {
        write(1, args[i], ft_strlen(args[i]));
        if (args[i + 1]) // Add space if not last argument
            write(1, " ", 1);
        i++;
    }

    // Print newline if `-n` is not set
    if (newline)
        write(1, "\n", 1);

    return (0);
}

char *ft_strjoin3(const char *s1, const char *s2, const char *s3)
{
    char *result;
    size_t len1 = ft_strlen(s1);
    size_t len2 = ft_strlen(s2);
    size_t len3 = ft_strlen(s3);

    result = malloc(len1 + len2 + len3 + 1);
    if (!result)
        return (NULL);
    ft_memcpy(result, s1, len1);
    ft_memcpy(result + len1, s2, len2);
    ft_memcpy(result + len1 + len2, s3, len3);
    result[len1 + len2 + len3] = '\0';
    return (result);
}

void ft_set_env(t_shell *shell, const char *key, const char *value)
{
    int i = 0;
    size_t key_len = ft_strlen(key);

    while (shell->env[i])
    {
        if (!ft_strncmp(shell->env[i], key, key_len) && shell->env[i][key_len] == '=')
        {
            free(shell->env[i]);
            shell->env[i] = ft_strjoin3(key, "=", value);
            return;
        }
        i++;
    }
    shell->env[i] = ft_strjoin3(key, "=", value);
    shell->env[i + 1] = NULL;
}

void ft_remove_env(t_shell *shell, const char *key)
{
    int i = 0, j = 0;
    size_t key_len = ft_strlen(key);

    while (shell->env[i])
    {
        if (!ft_strncmp(shell->env[i], key, key_len) && shell->env[i][key_len] == '=')
            free(shell->env[i]);
        else
            shell->env[j++] = shell->env[i];
        i++;
    }
    shell->env[j] = NULL;
}

int ft_cd(t_shell *shell, char **args)
{
    char *oldpwd = getcwd(NULL, 0);
    if (!args[1])
        return (write(2, "cd: missing argument\n", 21), 1);
    if (chdir(args[1]) != 0)
        return (perror("cd"), free(oldpwd), 1);
    
    char cwd[1024];
    if (getcwd(cwd, sizeof(cwd)))
    {
        ft_set_env(shell, "OLDPWD", oldpwd);
        ft_set_env(shell, "PWD", cwd);
    }
    free(oldpwd);
    return (0);
}

int ft_pwd(void)
{
    char cwd[1024];
    if (!getcwd(cwd, sizeof(cwd)))
        return (perror("pwd"), 1);
    printf("%s\n", cwd);
    return (0);
}

int ft_env(char **env)
{
    if (!env)
        return (1);
    for (int i = 0; env[i]; i++)
        printf("%s\n", env[i]);
    return (0);
}

int ft_export(t_shell *shell, char **args)
{
    if (!args[1])
        return (ft_env(shell->env));
    for (int i = 1; args[i]; i++)
    {
        char *equal = ft_strchr(args[i], '=');
        if (!equal)
            continue; // Ignore variables without '='

        size_t key_len = equal - args[i];
        char *key = ft_strndup(args[i], key_len);
        char *value = ft_strdup(equal + 1);

        ft_set_env(shell, key, value);
        free(key);
        free(value);
    }
    return (0);
}

int ft_unset(t_shell *shell, char **args)
{
    for (int i = 1; args[i]; i++)
        ft_remove_env(shell, args[i]);

    return (0); // Add return statement
}

Program name
 minishell
 Turn in files
 Makefile, *.h, *.c
 Makefile
 NAME, all, clean, fclean, re
 Arguments
 allowed External functions.:
 readline, rl_clear_history, rl_on_new_line,
 rl_replace_line, rl_redisplay, add_history,
 printf, malloc, free, write, access, open, read,
 close, fork, wait, waitpid, wait3, wait4, signal,
 sigaction, sigemptyset, sigaddset, kill, exit,
 getcwd, chdir, stat, lstat, fstat, unlink, execve,
 dup, dup2, pipe, opendir, readdir, closedir,
 strerror, perror, isatty, ttyname, ttyslot, ioctl,
 getenv, tcsetattr, tcgetattr, tgetent, tgetflag,
 tgetnum, tgetstr, tgoto, tputs
 Libft authorized: yes 
Your shell should:
 • Display a prompt when waiting for a new command.
 • Have a working history.
 • Search and launch the right executable (based on the PATH variable or using a
 relative or an absolute path).
 • Avoid using more than one global variable to indicate a received signal. Consider
 the implications: this approach ensures that your signal handler will not access your
 main data structures. Not interpret unclosed quotes or special characters which are not required by the
 subject such as \ (backslash) or ; (semicolon).  The readline() function can cause memory leaks. You don’t have to fix them. But
 that doesn’t mean your own code, yes the code you wrote, can have memory
 leaks. 
 • Handle ’ (single quote) which should prevent the shell from interpreting the meta
characters in the quoted sequence.
 • Handle " (double quote) which should prevent the shell from interpreting the meta
characters in the quoted sequence except for $ (dollar sign).
 • Implement redirections:
 ◦ < should redirect input.
 ◦ > should redirect output.
 ◦ << should be given a delimiter, then read the input until a line containing the
 delimiter is seen. However, it doesn’t have to update the history!
 ◦ >> should redirect output in append mode.
 • Implement pipes (| character). The output of each command in the pipeline is
 connected to the input of the next command via a pipe.
 • Handle environment variables ($ followed by a sequence of characters) which
 should expand to their values.
 • Handle $? which should expand to the exit status of the most recently executed
 foreground pipeline.
 • Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash.
 • In interactive mode:
 ◦ ctrl-C displays a new prompt on a new line.
 ◦ ctrl-D exits the shell.
 ◦ ctrl-\ does nothing.
 • Your shell must implement the following builtins:
 ◦ echo with option-n
 ◦ cd with only a relative or absolute path
 ◦ pwd with no options
 ◦ export with no options
 ◦ unset with no options
 ◦ env with no options or arguments
 ◦ exit with no options.  The readline() function can cause memory leaks. You don’t have to fix them. But
 that doesn’t mean your own code, yes the code you wrote, can have memory
 leaks
